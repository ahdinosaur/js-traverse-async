// Generated by CoffeeScript 1.9.0
(function() {
  var async, config, isArr, isObj;

  async = require('async');

  isObj = function(obj) {
    return '[object Object]' === Object.prototype.toString.call(obj);
  };

  isArr = function(arr) {
    return '[object Array]' === Object.prototype.toString.call(arr);
  };

  config = {
    parallel: 1
  };

  exports.config = function(obj) {
    var key, val, _results;
    _results = [];
    for (key in obj) {
      val = obj[key];
      _results.push(config[key] = val);
    }
    return _results;
  };

  exports.traverse = function(data, userCallback, done) {
    var q, traverseNode;
    traverseNode = function(context, next) {
      var key, _i, _len, _ref;
      if ((isArr(context.node) || isObj(context.node)) && typeof context.node.then !== "function") {
        _ref = Object.keys(context.node);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          key = _ref[_i];
          q.push({
            parent: context.node,
            node: context.node[key],
            key: key,
            path: context.path.concat([key])
          });
        }
      }
      return userCallback.call(context, context.node, next);
    };
    q = async.queue(traverseNode, config.parallel);
    q.drain = function() {
      if (done) {
        return done(data);
      }
    };
    q.push({
      node: data,
      path: [],
      isRoot: true
    });
    return {
      "break": q.kill,
      push: q.push
    };
  };

}).call(this);
